"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeScreenshot = exports.cleanupScreenshots = void 0;
const execa_1 = __importDefault(require("execa"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const file_exists_1 = require("./utils/file-exists");
const logger_1 = require("./logger");
const cleanupScreenshots = async () => {
    const latestDirPath = path_1.default.join(process.cwd(), '.owl', 'latest');
    await fs_1.promises.rm(latestDirPath, { recursive: true, force: true });
    const diffDirPath = path_1.default.join(process.cwd(), '.owl', 'diff');
    await fs_1.promises.rm(diffDirPath, { recursive: true, force: true });
};
exports.cleanupScreenshots = cleanupScreenshots;
/**
 * Takes a screenshot from the simulator.
 * @param filename - Required. The filename(excluding the extension) that will be used to save the screenshot. ie. 'homepage'
 * @returns the path to the screenshot.
 */
const takeScreenshot = async (filename) => {
    const platform = process.env.OWL_PLATFORM;
    const iosDevice = process.env.OWL_IOS_SIMULATOR;
    const iosSimulator = iosDevice?.replace(/([ /])/g, '\\$1');
    const debug = process.env.OWL_DEBUG === 'true';
    const updateBaseline = process.env.OWL_UPDATE_BASELINE === 'true';
    const screenshotFilename = `${filename}.png`;
    const stdio = debug ? 'inherit' : 'ignore';
    const logger = new logger_1.Logger(!!debug);
    const screenshotsDirPath = path_1.default.join(process.cwd(), '.owl');
    await fs_1.promises.mkdir(screenshotsDirPath, { recursive: true });
    const gitignoreExist = await (0, file_exists_1.fileExists)(path_1.default.join(screenshotsDirPath, '.gitignore'));
    if (!gitignoreExist) {
        await fs_1.promises.writeFile(path_1.default.join(process.cwd(), '.owl', '.gitignore'), '# generated by react-native-owl\ndiff/\nlatest/\nreport/\n');
    }
    const baselineExist = await (0, file_exists_1.fileExists)(path_1.default.join(screenshotsDirPath, 'baseline', platform, screenshotFilename));
    const DIR_NAME = updateBaseline || !baselineExist ? 'baseline' : 'latest';
    const cwd = path_1.default.join(screenshotsDirPath, DIR_NAME, platform);
    await fs_1.promises.mkdir(cwd, { recursive: true });
    const screenshotCommand = platform === 'ios'
        ? `xcrun simctl io ${iosSimulator} screenshot ${screenshotFilename}`
        : `adb exec-out screencap -p > ${screenshotFilename}`;
    logger.info(`[OWL - CLI] Will run the screenshot command: ${screenshotCommand}.`);
    await execa_1.default.command(screenshotCommand, {
        stdio,
        cwd,
        shell: platform === 'android',
    });
    if (!baselineExist) {
        logger.print(`[OWL - CLI] ${screenshotFilename} baseline screenshot created.`);
    }
    const screenshotPath = `${cwd}/${screenshotFilename}`;
    logger.info(`[OWL - CLI] Screenshot saved to ${screenshotPath}.`);
    return screenshotPath;
};
exports.takeScreenshot = takeScreenshot;
